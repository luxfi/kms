{{- $kmsValues := .Values.kms }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kms.fullname" . }}
  annotations:
    updatedAt: {{ now | date "2006-01-01 MST 15:04:05" | quote }}
    {{- with $kmsValues.deploymentAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  labels:
    {{- include "kms.labels" . | nindent 4 }}
spec:
  replicas: {{ $kmsValues.replicaCount }}
  selector:
    matchLabels:
      {{- include "kms.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "kms.matchLabels" . | nindent 8 }}
      annotations:
        updatedAt: {{ now | date "2006-01-01 MST 15:04:05" | quote }}
        {{- with $kmsValues.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
    {{- with $kmsValues.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with $kmsValues.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $kmsValues.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $kmsValues.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if $kmsValues.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $kmsValues.image.imagePullSecrets | nindent 6 }}
    {{- end }}
    {{- if $kmsValues.autoDatabaseSchemaMigration }}
      serviceAccountName: {{ include "kms.serviceAccountName" . }}
      initContainers:
      - name: "migration-init"
        image: "{{ $kmsValues.databaseSchemaMigrationJob.image.repository }}:{{ $kmsValues.databaseSchemaMigrationJob.image.tag }}"
        imagePullPolicy: {{ $kmsValues.databaseSchemaMigrationJob.image.pullPolicy }}
        args: 
        - "job"
        - "{{ .Release.Name }}-schema-migration-{{ .Release.Revision }}"
    {{- end }}
      containers:
      - name: {{ template "kms.name" . }}-{{ $kmsValues.name }}
        image: "{{ $kmsValues.image.repository }}:{{ $kmsValues.image.tag }}"
        imagePullPolicy: {{ $kmsValues.image.pullPolicy }}
        readinessProbe:
          httpGet:
            path: /api/status
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
        ports: 
        - containerPort: 8080
        env:
        {{- if .Values.postgresql.useExistingPostgresSecret.enabled }}
        - name: DB_CONNECTION_URI
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.useExistingPostgresSecret.existingConnectionStringSecret.name }}
              key: {{ .Values.postgresql.useExistingPostgresSecret.existingConnectionStringSecret.key }}
        {{- end }}
        {{- if .Values.postgresql.enabled }}
        - name: DB_CONNECTION_URI
          value: {{ include "kms.postgresDBConnectionString" . }}
        {{- end }}
        {{- if .Values.redis.enabled }}
        - name: REDIS_URL
          value: {{ include "kms.redisConnectionString" . }}
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ $kmsValues.kubeSecretRef }}
        {{- if  $kmsValues.resources }}
        resources: {{- toYaml $kmsValues.resources | nindent 12 }}
        {{- end }}
        {{- with $kmsValues.extraVolumeMounts }}
        volumeMounts:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with $kmsValues.extraVolumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---

apiVersion: v1
kind: Service 
metadata:
  name: {{ include "kms.fullname" . }}
  labels:
    {{- include "kms.labels" . | nindent 4 }}
  {{- with $kmsValues.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ $kmsValues.service.type }}
  selector:
    {{- include "kms.matchLabels" . | nindent 8 }}
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      {{- if eq $kmsValues.service.type "NodePort" }}
      nodePort: {{ $kmsValues.service.nodePort }}
      {{- end }}
